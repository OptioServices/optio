// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optio/distro/recipient.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Recipient struct {
	Address       string                   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Distributions []*RecipientDistribution `protobuf:"bytes,3,rep,name=distributions,proto3" json:"distributions,omitempty"`
}

func (m *Recipient) Reset()         { *m = Recipient{} }
func (m *Recipient) String() string { return proto.CompactTextString(m) }
func (*Recipient) ProtoMessage()    {}
func (*Recipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f7e684e841629b7, []int{0}
}
func (m *Recipient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recipient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipient.Merge(m, src)
}
func (m *Recipient) XXX_Size() int {
	return m.Size()
}
func (m *Recipient) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipient.DiscardUnknown(m)
}

var xxx_messageInfo_Recipient proto.InternalMessageInfo

func (m *Recipient) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Recipient) GetDistributions() []*RecipientDistribution {
	if m != nil {
		return m.Distributions
	}
	return nil
}

type RecipientDistribution struct {
	Amount           uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	DistributionDate string `protobuf:"bytes,2,opt,name=distributionDate,proto3" json:"distributionDate,omitempty"`
	Signature        string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Nonce            uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *RecipientDistribution) Reset()         { *m = RecipientDistribution{} }
func (m *RecipientDistribution) String() string { return proto.CompactTextString(m) }
func (*RecipientDistribution) ProtoMessage()    {}
func (*RecipientDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f7e684e841629b7, []int{1}
}
func (m *RecipientDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientDistribution.Merge(m, src)
}
func (m *RecipientDistribution) XXX_Size() int {
	return m.Size()
}
func (m *RecipientDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientDistribution proto.InternalMessageInfo

func (m *RecipientDistribution) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RecipientDistribution) GetDistributionDate() string {
	if m != nil {
		return m.DistributionDate
	}
	return ""
}

func (m *RecipientDistribution) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *RecipientDistribution) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*Recipient)(nil), "optio.distro.Recipient")
	proto.RegisterType((*RecipientDistribution)(nil), "optio.distro.RecipientDistribution")
}

func init() { proto.RegisterFile("optio/distro/recipient.proto", fileDescriptor_4f7e684e841629b7) }

var fileDescriptor_4f7e684e841629b7 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x1b, 0x3b, 0x8e, 0x34, 0x2a, 0x48, 0x50, 0xc9, 0x62, 0x08, 0x65, 0xdc, 0x14, 0xc1,
	0x16, 0xf4, 0x0d, 0x64, 0x40, 0x5c, 0x09, 0x75, 0xe7, 0xae, 0x3f, 0x61, 0xcc, 0x62, 0x72, 0x43,
	0x72, 0x2b, 0xfa, 0x14, 0xfa, 0x58, 0x2e, 0x67, 0xe9, 0x52, 0xda, 0x17, 0x11, 0xd3, 0xa9, 0x56,
	0x9c, 0xe5, 0xb9, 0xf7, 0x3b, 0x27, 0xb9, 0x87, 0xce, 0xc0, 0xa0, 0x82, 0xac, 0x56, 0x0e, 0x2d,
	0x64, 0x56, 0x56, 0xca, 0x28, 0xa9, 0x31, 0x35, 0x16, 0x10, 0xd8, 0x81, 0xdf, 0xa6, 0xfd, 0x76,
	0x6e, 0x68, 0x94, 0x0f, 0x00, 0xe3, 0x74, 0xaf, 0xa8, 0x6b, 0x2b, 0x9d, 0xe3, 0x3b, 0x31, 0x49,
	0xa2, 0x7c, 0x90, 0xec, 0x96, 0x1e, 0x7a, 0x83, 0x2a, 0x1b, 0x54, 0xa0, 0x1d, 0x0f, 0xe3, 0x30,
	0xd9, 0xbf, 0x3c, 0x4b, 0xc7, 0x61, 0xe9, 0x4f, 0xd2, 0x62, 0xc4, 0xe6, 0x7f, 0x9d, 0xf3, 0x57,
	0x42, 0x4f, 0xb6, 0x82, 0xec, 0x94, 0x4e, 0x8b, 0x15, 0x34, 0x1a, 0x39, 0x89, 0x49, 0x32, 0xc9,
	0x37, 0x8a, 0x9d, 0xd3, 0xa3, 0x71, 0xc4, 0xa2, 0x40, 0xb9, 0xf9, 0xdf, 0xbf, 0x39, 0x9b, 0xd1,
	0xc8, 0xa9, 0xa5, 0x2e, 0xb0, 0xb1, 0x92, 0x87, 0x1e, 0xfa, 0x1d, 0xb0, 0x63, 0xba, 0xab, 0x41,
	0x57, 0x92, 0x4f, 0xfc, 0x03, 0xbd, 0xb8, 0xbe, 0x79, 0x6f, 0x05, 0x59, 0xb7, 0x82, 0x7c, 0xb6,
	0x82, 0xbc, 0x75, 0x22, 0x58, 0x77, 0x22, 0xf8, 0xe8, 0x44, 0xf0, 0x70, 0xb1, 0x54, 0xf8, 0xd8,
	0x94, 0x69, 0x05, 0xab, 0xec, 0xee, 0xfb, 0xd2, 0x7b, 0x69, 0x9f, 0x54, 0x25, 0x5d, 0xd6, 0x57,
	0xfc, 0x3c, 0x94, 0x8c, 0x2f, 0x46, 0xba, 0x72, 0xea, 0x1b, 0xbe, 0xfa, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0xba, 0xff, 0x3b, 0xdf, 0x81, 0x01, 0x00, 0x00,
}

func (m *Recipient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recipient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recipient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecipient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRecipient(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *RecipientDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintRecipient(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRecipient(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DistributionDate) > 0 {
		i -= len(m.DistributionDate)
		copy(dAtA[i:], m.DistributionDate)
		i = encodeVarintRecipient(dAtA, i, uint64(len(m.DistributionDate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintRecipient(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecipient(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecipient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Recipient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRecipient(uint64(l))
	}
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovRecipient(uint64(l))
		}
	}
	return n
}

func (m *RecipientDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovRecipient(uint64(m.Amount))
	}
	l = len(m.DistributionDate)
	if l > 0 {
		n += 1 + l + sovRecipient(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRecipient(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovRecipient(uint64(m.Nonce))
	}
	return n
}

func sovRecipient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecipient(x uint64) (n int) {
	return sovRecipient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Recipient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recipient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recipient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecipient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecipient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, &RecipientDistribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecipient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipientDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecipient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecipient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecipient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecipient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecipient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecipient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecipient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecipient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecipient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecipient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecipient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecipient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecipient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecipient = fmt.Errorf("proto: unexpected end of group")
)
